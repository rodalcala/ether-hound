{"version":3,"sources":["../node_modules/web3-eth-accounts/src sync","redux/reducer.js","redux/constants.js","redux/middleware.js","redux/actions.js","components/AboutModal.js","components/Header.js","components/BlockPicker.js","components/SeparationLine.js","components/TransactionPicker.js","components/TransactionDetails.js","components/Charts.js","App.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","initialState","web3","Web3","givenProvider","nBlocks","blocks","activeBlock","undefined","activeTransaction","activeTransactionReceipt","isAppReady","reducer","state","action","type","response","number","blockNumber","transaction","middleware","store","next","a","triggerAsync","getState","getBlocks","n","eth","getBlockNumber","latestBlock","allBlocks","i","getBlock","block","push","transactionHash","getTransactionReceipt","dispatch","err","AboutModal","opened","setOpened","visible","onClose","className","size","emphasis","mode","onClick","connect","setNBlocks","actions","useState","items","active","onChange","value","item","setActiveBlock","selected","setSelected","blockNumbers","map","index","SeparationLine","internal","setActiveTransaction","activeTransactionIndex","setActiveTransactionIndex","ethTransactionsFromActiveBlock","filter","transactions","trans","ethTransactionsBySlicedHash","hash","prefix","slice","sufix","useEffect","length","weight","header","title","nonce","entity","from","to","gasUsed","status","disabled","utils","fromWei","gas","gasPrice","emptyDataset","Array","fill","transactionsPerBlock","biggestBlockByTrans","Math","max","relativeTransactionsPerBlock","weiPerTransaction","weiPerBlock","reduce","total","num","parseInt","biggestBlockByWei","relativeWeiPerBlock","transactionsWithEth","transactionsWithoutEth","forEach","transValue","lines","values","color","theme","gradientStartActive","gradientEndActive","springConfig","mass","tension","friction","label","width","height","background","data","totalTransactions","name","percentage","getPartitionBarData","colors","accent","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","applyMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.57df72f9.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 328;","import Web3 from 'web3';\nimport {\n  SET_NUMBER_OF_BLOCKS,\n  GET_BLOCKS_PENDING,\n  GET_BLOCKS_SUCCESS,\n  SET_ACTIVE_BLOCK,\n  SET_ACTIVE_TRANSACTION,\n  GET_TRANSACTION_RECEIPT_PENDING,\n  GET_TRANSACTION_RECEIPT_SUCCESS,\n} from './constants';\n\nconst web3 = new Web3(Web3.givenProvider);\n\nconst initialState = {\n  web3,\n  nBlocks: 10,\n  blocks: [],\n  activeBlock: undefined,\n  activeTransaction: undefined,\n  activeTransactionReceipt: {},\n  isAppReady: false,\n}\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_NUMBER_OF_BLOCKS:\n      return { ...state, nBlocks: action.nBlocks }\n    case GET_BLOCKS_PENDING:\n      return { ...state, isAppReady: false }\n    case GET_BLOCKS_SUCCESS:\n      return { ...state, blocks: action.response, isAppReady: true, activeBlock: action.response[0].number }\n    case SET_ACTIVE_BLOCK:\n      return { ...state, activeBlock: action.blockNumber }\n    case SET_ACTIVE_TRANSACTION:\n      return { ...state, activeTransaction: action.transaction }\n    case GET_TRANSACTION_RECEIPT_PENDING:\n      return { ...state, activeTransactionReceipt: {} }\n    case GET_TRANSACTION_RECEIPT_SUCCESS:\n      return { ...state, activeTransactionReceipt: action.response }\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","const SET_NUMBER_OF_BLOCKS = 'SET_NUMBER_OF_BLOCKS';\nconst GET_BLOCKS = 'GET_BLOCKS';\nconst GET_BLOCKS_PENDING = 'GET_BLOCKS_PENDING';\nconst GET_BLOCKS_SUCCESS = 'GET_BLOCKS_SUCCESS';\nconst SET_ACTIVE_BLOCK = 'SET_ACTIVE_BLOCK';\nconst SET_ACTIVE_TRANSACTION = 'SET_ACTIVE_TRANSACTION';\nconst GET_TRANSACTION_RECEIPT = 'GET_TRANSACTION_RECEIPT';\nconst GET_TRANSACTION_RECEIPT_PENDING = 'GET_TRANSACTION_RECEIPT_PENDING';\nconst GET_TRANSACTION_RECEIPT_SUCCESS = 'GET_TRANSACTION_RECEIPT_SUCCESS';\n\nexport {\n  SET_NUMBER_OF_BLOCKS,\n  GET_BLOCKS,\n  GET_BLOCKS_PENDING,\n  GET_BLOCKS_SUCCESS,\n  SET_ACTIVE_BLOCK,\n  SET_ACTIVE_TRANSACTION,\n  GET_TRANSACTION_RECEIPT,\n  GET_TRANSACTION_RECEIPT_PENDING,\n  GET_TRANSACTION_RECEIPT_SUCCESS,\n};","/* Middleware to handle asynchronous calls to the blockchain */\n\nconst middleware = store => next => async action => {\n  \n  if (!action.triggerAsync) return next(action);\n  \n  const { type } = action;\n  const { web3 } = store.getState();\n\n  next({\n    type: `${type}_PENDING`,\n  });\n\n  const getBlocks = async (n) => {\n    const latestBlock = await web3.eth.getBlockNumber();\n    const allBlocks = [];\n\n    for (let i = 0; i < n; i++) {\n      const block = await web3.eth.getBlock(latestBlock - i, true);\n      allBlocks.push(block);\n    };\n\n    return allBlocks;\n  }\n\n  try {\n    let response;\n\n    if (action.nBlocks) {\n      response = await getBlocks(action.nBlocks);\n    } else if (action.transactionHash) {\n      response = await web3.eth.getTransactionReceipt(action.transactionHash)\n    }\n  \n    store.dispatch({\n      type: `${type}_SUCCESS`,\n      response,\n    })\n  } catch(err) {\n    store.dispatch({\n      type: `${type}_FAILURE`,\n      err,\n    })\n  }\n\n};\n\nexport default middleware;\n","import {\n  SET_NUMBER_OF_BLOCKS,\n  GET_BLOCKS,\n  SET_ACTIVE_BLOCK,\n  SET_ACTIVE_TRANSACTION,\n  GET_TRANSACTION_RECEIPT\n} from './constants';\n\nconst setNBlocks = (nBlocks) => ({\n  type: SET_NUMBER_OF_BLOCKS,\n  nBlocks,\n});\n\nconst getBlocks = (nBlocks) => ({\n  type: GET_BLOCKS,\n  triggerAsync: true,\n  nBlocks,\n});\n\nconst setActiveBlock = (blockNumber) => ({\n  type: SET_ACTIVE_BLOCK,\n  blockNumber,\n});\n\nconst setActiveTransaction = (transaction) => ({\n  type: SET_ACTIVE_TRANSACTION,\n  transaction,\n})\n\nconst getTransactionReceipt = (transactionHash) => ({\n  type: GET_TRANSACTION_RECEIPT,\n  triggerAsync: true,\n  transactionHash,\n});\n\nexport default {\n  setNBlocks,\n  getBlocks,\n  setActiveBlock,\n  setActiveTransaction,\n  getTransactionReceipt,\n};","import React from 'react';\nimport { Modal, Button, Text } from '@aragon/ui';\n\nconst AboutModal = ({ opened, setOpened }) => (\n  <Modal visible={opened} onClose={() => setOpened(false)}>\n    <div className=\"AboutModal-container\">\n      <div className=\"AboutModal-info\">\n        <Text size=\"large\" className=\"AboutModal-info-head\">Webapp created by Rodrigo Alcala for Aragon One's technical challenge.</Text>\n        <Text>The app allows you to explore Ethereums's mainnet latest blocks.</Text>\n        <Text>You can pick which block's transaction to analyle.</Text>\n        <Text>It also let's you set the amount of blocks to fetch and shows a small overview of the dataset.</Text>\n      </div>\n      <Button emphasis=\"negative\" size=\"small\" mode=\"outline\" onClick={() => setOpened(false)}>Close modal</Button>\n    </div>\n  </Modal>\n);\n\nexport default AboutModal;\n","/* ABOUT: Header component. Determines the amount of blocks to fetch. */\n\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { Button, DropDown } from '@aragon/ui';\n\nimport actions from '../redux/actions';\nimport AboutModal from './AboutModal';\n\nconst Header = ({ nBlocks, setNBlocks }) => {\n  const [opened, setOpened] = useState(false);\n  const items = [ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 ];\n\n  const handleDropDown = (value, item) => {\n    setNBlocks(item[value])\n  };\n\n  return (\n    <div className=\"Header-container\">\n      <Button mode=\"strong\" size=\"small\" onClick={ () => setOpened(true) }>\n        <p>About</p>\n      </Button>\n\n      <AboutModal opened={ opened } setOpened={ setOpened } />\n\n      <div className=\"Header-slider-container\">\n        <p>How many blocks would you like to fetch?</p>\n        <DropDown items={ items } active={ nBlocks - 2 } onChange={ handleDropDown } />\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = state => ({\n  nBlocks: state.nBlocks,\n})\n\nconst mapDispatchToProps = dispatch => ({\n  setNBlocks: (nBlocks) => dispatch(actions.setNBlocks(nBlocks)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\n","/* ABOUT: First component in the body. Displays all blocks and picks the active one. */\n\nimport React, { useState } from 'react'\nimport { connect } from 'react-redux';\nimport { TabBar } from '@aragon/ui'\n\nimport actions from '../redux/actions';\n\nconst BlockPicker = ({ blocks, setActiveBlock }) => {\n  const [selected, setSelected] = useState(0);\n  const blockNumbers = blocks.map((block) => `#${block.number}`);\n\n  const handleActiveBlockChange = (index) => {\n    setSelected(index);\n    setActiveBlock(blocks[index].number);\n  }\n\n  return (\n    <div className='BlockPicker-container'>\n      <TabBar\n        items={blockNumbers}\n        selected={selected}\n        onChange={handleActiveBlockChange}\n      />\n    </div>\n  )\n}\n\nconst mapStateToProps = state => ({\n  blocks: state.blocks,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  setActiveBlock: (blockNumber) => dispatch(actions.setActiveBlock(blockNumber)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BlockPicker);\n","/* ABOUT: Renders a line. It can be thick or slim, depends on the props. */\n\nimport React from 'react';\n\nconst SeparationLine = ({ internal }) => (\n  <div className={ internal ? \"SeparationLine-internal\" : \"SeparationLine\" } />\n);\n\nexport default SeparationLine;\n","/* ABOUT: Component in charge of determining which is the current active transaction. */\n\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { DropDown, Text } from '@aragon/ui';\n\nimport actions from '../redux/actions';\n\nconst TransactionPicker = ({ blocks, activeBlock, setActiveTransaction }) => {\n  const [ activeTransactionIndex, setActiveTransactionIndex ] = useState(0);\n  \n  const ethTransactionsFromActiveBlock = blocks\n    /* NOTE: Filter the array of blocks to get an array of transactions (from the current block) */\n    .filter((block) => block.number === activeBlock)[0].transactions\n    /* NOTE: Filter transaction to get only the ones moving Ether */\n    .filter((trans) => trans.value !== '0');\n  const ethTransactionsByHash = ethTransactionsFromActiveBlock.map((trans) => trans.hash);\n  const ethTransactionsBySlicedHash = ethTransactionsByHash.map((hash) => {\n    const prefix = hash.slice(0, 12);\n    const sufix = hash.slice(56);\n    return `${prefix}...${sufix}`;\n  });\n  \n  useEffect(() => {\n    /* NOTE: Set the active transaction on start-up */\n    setActiveTransaction(ethTransactionsFromActiveBlock[0]);\n  }, [setActiveTransaction, ethTransactionsFromActiveBlock]);\n\n  const handleDropDown = (index) => {\n    setActiveTransactionIndex(index);\n    setActiveTransaction(ethTransactionsFromActiveBlock[index]);\n  }\n\n  /* NOTE: Conditional rendering to display a note in case the current block has no Ether transactions */\n  if (!ethTransactionsFromActiveBlock.length) {\n    return (\n      <div className=\"TransactionPicker-container\">\n        <Text size=\"xlarge\" weight=\"bold\">This block has no transactions moving Ether, try with another one!</Text>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"TransactionPicker-container\">\n        <div className=\"TransactionPicker-transaction-selector\">\n          <Text size=\"xlarge\" weight=\"bold\">\n            The selected block (#{activeBlock}) has {ethTransactionsFromActiveBlock.length} transactions moving Ether. Let's inspect one:\n          </Text>\n          <DropDown items={ethTransactionsBySlicedHash} active={activeTransactionIndex} onChange={handleDropDown} />\n        </div>\n      </div>\n    );\n  }\n};\n\nconst mapStateToProps = (state) => ({\n  blocks: state.blocks,\n  activeBlock: state.activeBlock,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  setActiveTransaction: (transaction) => dispatch(actions.setActiveTransaction(transaction)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TransactionPicker);\n","/* ABOUT: Component displaying the current transaction details. */\n\nimport React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Table, TableRow, TableHeader, TableCell, Text, IdentityBadge, TransactionBadge, Button } from '@aragon/ui';\n\nimport actions from '../redux/actions';\n\nconst TransactionDetails = ({ web3, getTransactionReceipt, activeTransaction, activeTransactionReceipt }) => {\n  useEffect(() => {\n    if (activeTransaction) getTransactionReceipt(activeTransaction.hash);\n  },[getTransactionReceipt, activeTransaction]);\n\n  if (!activeTransaction) return <Text>Transaction's details are loading...</Text>\n  return (\n    <Table\n      header={\n        <TableRow>\n          <TableHeader title=\"Transaction details\" />\n        </TableRow>\n      }\n    >\n      <TableRow>\n        <TableCell>\n          <Text>Transaction hash:</Text>\n        </TableCell>\n        <TableCell>\n          <TransactionBadge transaction={activeTransaction.hash} />\n        </TableCell>\n        <TableCell>\n          <Text>Nonce:</Text>\n        </TableCell>\n        <TableCell>\n          <Text>{activeTransaction.nonce}</Text>\n        </TableCell>\n      </TableRow>\n      <TableRow>\n        <TableCell>\n          <Text>Sender:</Text>\n        </TableCell>\n        <TableCell>\n          <IdentityBadge entity={activeTransaction.from} />\n        </TableCell>\n        <TableCell>\n          <Text>Reciever:</Text>\n        </TableCell>\n        <TableCell>\n          <IdentityBadge entity={activeTransaction.to} />\n        </TableCell>\n      </TableRow>\n      <TableRow>\n        <TableCell>\n          <Text>Transaction status:</Text>\n        </TableCell>\n        <TableCell>\n          {\n              activeTransactionReceipt.gasUsed ?\n                activeTransactionReceipt.status ?\n                  <Button emphasis=\"positive\" size=\"small\" disabled={true}>Success</Button> :\n                  <Button emphasis=\"negative\" size=\"small\" disabled={true}>Reverted</Button> :\n                'Checking...'\n            }\n        </TableCell>\n        <TableCell>\n          <Text>Ether transfered:</Text>\n        </TableCell>\n        <TableCell>\n          <Text>{web3.utils.fromWei(activeTransaction.value)}</Text>\n        </TableCell>\n      </TableRow>\n      <TableRow>\n        <TableCell>\n          <Text>Gas limit:</Text>\n        </TableCell>\n        <TableCell>\n          <Text>{activeTransaction.gas}</Text>\n        </TableCell>\n        <TableCell>\n          <Text>Gas used:</Text>\n        </TableCell>\n        <TableCell>\n          <Text>\n            {\n              activeTransactionReceipt.gasUsed ?\n                `${activeTransactionReceipt.gasUsed} (${activeTransactionReceipt.gasUsed/activeTransaction.gas*100}%)` :\n                'Checking...'\n            }\n          </Text>\n        </TableCell>\n      </TableRow>\n      <TableRow>\n        <TableCell>\n          <Text>Gas price:</Text>\n        </TableCell>\n        <TableCell>\n          <Text>{web3.utils.fromWei(activeTransaction.gasPrice, 'Gwei')} Gwei</Text>\n        </TableCell>\n        <TableCell>\n          <Text>Transaction fee:</Text>\n        </TableCell>\n        <TableCell>\n        <Text>\n            {\n              activeTransactionReceipt.gasUsed ?\n                `${web3.utils.fromWei(activeTransaction.gasPrice) * activeTransactionReceipt.gasUsed} Ether` :\n                'Checking...'\n            }\n          </Text>\n        </TableCell>\n      </TableRow>\n    </Table>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  web3: state.web3,\n  activeTransaction: state.activeTransaction,\n  activeTransactionReceipt: state.activeTransactionReceipt,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  getTransactionReceipt: (transactionHash) => dispatch(actions.getTransactionReceipt(transactionHash)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TransactionDetails);\n","/* ABOUT: Component displaying facts about the selected dataset. */\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { LineChart, Info, PartitionBar, Text, theme } from '@aragon/ui';\n\nimport SeparationLine from './SeparationLine';\n\nconst Charts = ({ blocks, nBlocks }) => {\n  const emptyDataset = new Array(nBlocks).fill(0);\n\n  const transactionsPerBlock = blocks.map((block) => block.transactions.length);\n  const biggestBlockByTrans = Math.max(...transactionsPerBlock);\n  const relativeTransactionsPerBlock = transactionsPerBlock.map((trans) => trans/biggestBlockByTrans);\n\n  /* NOTE: Transform the array of blocks into an array of arrays of value per transaction */\n  const weiPerTransaction = blocks.map((block) => block.transactions.map((trans) => trans.value));\n  /* NOTE: Add all the values per transaction to have an array of wei transfered per block */\n  const weiPerBlock = weiPerTransaction.map((block) => block.reduce((total, num) => parseInt(total) + parseInt(num), 0));\n  const biggestBlockByWei = Math.max(...weiPerBlock);\n  const relativeWeiPerBlock = weiPerBlock.map((trans) => trans/biggestBlockByWei);\n\n  let transactionsWithEth = 0;\n  let transactionsWithoutEth = 0;\n\n  weiPerTransaction.forEach((block) => block.forEach((transValue) => {\n    if (transValue === '0') transactionsWithoutEth++;\n    else transactionsWithEth++\n  }))\n\n  const getPartitionBarData = () => {\n    const totalTransactions = transactionsWithEth + transactionsWithoutEth;\n    const data = [\n      {\n        name: 'Transactions sending ETH',\n        percentage: transactionsWithEth / totalTransactions * 100,\n      },\n      {\n        name: 'Transactions not sending ETH',\n        percentage: transactionsWithoutEth / totalTransactions * 100,\n      },\n    ];\n\n    return data;\n  }\n\n  return (\n    <div>\n      <Text size=\"xlarge\" weight=\"bold\" className=\"Charts-header\">\n        Here's a little overview information about the selected dataset:\n      </Text>\n      <div className='Charts-container'>\n        <LineChart\n          lines={[\n            { id: 1, values: transactionsPerBlock.length ? relativeTransactionsPerBlock : emptyDataset, color: theme.gradientStartActive },\n            { id: 2, values: weiPerBlock.length ? relativeWeiPerBlock : emptyDataset, color: theme.gradientEndActive }\n          ]}\n          springConfig={{ mass: 1, tension: 120, friction: 80 }}\n          label={index => index + 1}\n          width={1100}\n          height={550}\n        />\n        <div className='Charts-info'>\n          <Info background={ theme.gradientStartActive }><p className='Charts-info-white'>Relative amount of transactions per block in the dataset</p></Info>\n          <Info background={ theme.gradientEndActive }><p>Relative amount of ETH moved per block in the dataset</p></Info>\n        </div>\n        <SeparationLine internal={true} />\n        <PartitionBar data={ getPartitionBarData() } colors={[theme.accent, theme.disabled]} />\n      </div>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  blocks: state.blocks,\n  nBlocks: state.nBlocks,\n});\n\nexport default connect(mapStateToProps)(Charts);\n","/* ABOUT: Main component of this SPA. Handles blocks retrieval and loading status. */\n\nimport React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Main, theme } from '@aragon/ui';\nimport { PropagateLoader } from 'react-spinners';\n\nimport './App.css';\nimport actions from './redux/actions';\nimport Header from './components/Header';\nimport BlockPicker from './components/BlockPicker';\nimport SeparationLine from './components/SeparationLine';\nimport TransactionPicker from './components/TransactionPicker';\nimport TransactionDetails from './components/TransactionDetails';\nimport Charts from './components/Charts';\n\nconst App = ({ getBlocks, isAppReady, nBlocks }) => {\n  useEffect(() => {\n    getBlocks(nBlocks)\n  }, [getBlocks, nBlocks])\n\n  if (isAppReady) {\n    return (\n      <Main className='main'>\n        <Header />\n        <BlockPicker />\n        <TransactionPicker />\n        <TransactionDetails />\n        <SeparationLine />\n        <Charts />\n        <SeparationLine />\n      </Main>\n    )\n  } else {\n    return (\n      <div className='loading'>\n        <PropagateLoader size={ 20 } color={ theme.gradientEndActive } />\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  isAppReady: state.isAppReady,\n  nBlocks: state.nBlocks,\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  getBlocks: (nBlocks) => dispatch(actions.getBlocks(nBlocks)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux';\n\nimport reducer from './redux/reducer';\nimport middleware from './redux/middleware';\nimport App from './App';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(\n  reducer,\n  composeEnhancers(applyMiddleware(middleware))\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}